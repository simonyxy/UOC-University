Shader "Custom/edgeDetectHard"
{
   Properties{
           _MainTex("Base(RGB)",2D) = "white"{}
           _EdgeOnly("EdgeOnly",Float) = 1.0
           _EdgeColor("EdgeColor",Color) = (0,0,0,1)
           _BackgroundColor("BackgroundColor",Color) = (1,1,1,1)
           _SampleDistance("SampleDistance",Float) = 1.0
           _Sensitivity("Sensitivity",Vector) = (1,1,1,1)
   }

   SubShader{
       CGINCLUDE
       #include "UnityCG.cginc"
       sampler2D _MainTex;
       half4 _MainTex_TexelSize;
       fixed _EdgeOnly;
       fixed4 _EdgeColor;
       fixed4 _BackgroundColor;
       float _SampleDistance;
       half4 _Sensitivity;
       sampler2D _CameraDepthNormalsTexture;

       struct v2f {
           float4 pos:SV_POSITION;
           half2 uv[5]:TEXCOORD0;
       };

       half CheckSame(half4 center, half4 sam)
       {
           half2 centerNormal = center.xy;
           float centerDepth = DecodeFloatRG(center.zw);
           half2 sampleNormal = sam.xy;
           float sampleDepth =DecodeFloatRG(sam.zw);

           half2 diffNormal = abs(centerNormal - sampleNormal) * _Sensitivity.x;
           int isSameNormal = (diffNormal.x + diffNormal.y) <0.1;

           float diffDepth = abs(centerDepth - sampleDepth) * _Sensitivity.y;
           int isSameDepth = diffDepth < 0.1 * centerDepth;

           return isSameNormal * isSameDepth ? 1.0 :0.0;
       }

       void vert(in appdata_img v , out v2f o )
       {
           o.pos = UnityObjectToClipPos(v.vertex);
           half2 uv = v.texcoord;
           o.uv[0] =uv;

           #if UNITY_UV_STARTS_AT_TOP
           if(_MainTex_TexelSize.y <0 )
               uv.y = 1-uv.y;
           #endif

           o.uv[1] = uv + _MainTex_TexelSize.xy * half2(1,1)  * _SampleDistance;
		   o.uv[2] = uv + _MainTex_TexelSize.xy * half2(-1,-1)* _SampleDistance;
           o.uv[3] = uv + _MainTex_TexelSize.xy * half2(-1,1) * _SampleDistance;
           o.uv[4] = uv + _MainTex_TexelSize.xy * half2(1,-1) * _SampleDistance;
       }

       fixed4 fragRobertsCrossDepthAndNormal(v2f i) :SV_Target
       {
           half4 sampler1 = tex2D(_CameraDepthNormalsTexture,i.uv[1]);
           half4 sampler2 = tex2D(_CameraDepthNormalsTexture,i.uv[2]);
           half4 sampler3 = tex2D(_CameraDepthNormalsTexture,i.uv[3]);
           half4 sampler4 = tex2D(_CameraDepthNormalsTexture,i.uv[4]);

           half edge = 1.0;
           edge *= CheckSame(sampler1,sampler2);
           edge *= CheckSame(sampler3,sampler4);

           fixed4 withEdgeColor = lerp(_EdgeColor,tex2D(_MainTex,i.uv[0]),edge);
           fixed4 onlyEdgeColor = lerp(_EdgeColor,_BackgroundColor,edge);
           return lerp(withEdgeColor,onlyEdgeColor,_EdgeOnly);
       }

       ENDCG

       Pass{
           ZTest Always Cull Off Zwrite Off
           CGPROGRAM
           #pragma vertex vert 
           #pragma fragment fragRobertsCrossDepthAndNormal
           ENDCG
       }
   }
   Fallback off
}